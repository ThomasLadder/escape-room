
(in-microtheory EscapeMt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;FETCH-Accessible
(preconditionForMethod
      (and
	(accessible ?obj ?mt)
	(isa ?obj keyOfLock))    
 (methodForAction
  (fetch ?obj ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
     (escape ?obj ?mt))
))))

;;;;FETCH-NotAccessible
(preconditionForMethod
      (and
	(notAccessible ?obj ?mt)
	(isa ?obj keyOfLock)
	(ist-Information ?mt (inContainer ?obj ?container)))            
 (methodForAction
  (fetch ?obj ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
     (breakContainer ?container ?poundTool ?mt))
         (doAgentPlan
     (fetch ?obj ?mt))
))))


;;;;FETCH-NotAccessible--TESTINGCLEARING
(preconditionForMethod
      (and
  (notAccessible ?obj ?mt)
  (unclearTop ?obj ?mt))            
 (methodForAction
  (fetch ?obj ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
     (removeFromTop ?obj ?mt))
         (doAgentPlan
     (fetch ?obj ?mt))
))))


;;;BREAK CONTAINER
(preconditionForMethod
      (and
	(ist-Information ?mt (isa ?container Container))
	(ist-Information ?mt (isa ?poundTool PoundingDrivingImplement))
  (ist-Information ?mt (inContainer ?obj ?container))
	(accessible ?container ?mt)
	(accessible ?poundTool ?mt)
 )            
 (methodForAction
     (breakContainer ?container ?poundTool ?mt)
  (actionSequence
   (TheList
	   (doRecord (ist-Information MyEscapePlanMt (breakContainer ?container ?poundTool)))
    ;;;update the state of the world 
	  (doRecord (ist-Information ?mt (onTable ?obj)))   

))))

;;;REMOVEFROMTOP 

(preconditionForMethod
  (ist-Information ?mt (onTop ?objToRemove ?objUnderneath))
      
  (methodForAction
  (removeFromTop ?objUnderneath ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
      ;;; the object will now be on the table
      
      (doRecord (ist-Information ?mt (onTable ?objToRemove ?mt)))
      (doForget (ist-Information ?mt (onTop ?objToRemove ?objUnderneath)))
      
      ;;;record plan
      (doRecord (ist-Information MyEscapePlanMt (removeFromTop ?objToRemove ?mt)))
      )
))))


;;;ESCAPE = win!
(preconditionForMethod
      (and (true))            
(methodForAction
  (escape ?obj ?mt)
  (actionSequence
   (TheList
    (doRecord (ist-Information MyEscapePlanMt (escape ?obj ?mt)))
))))

